<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Theme Evaluation Slip</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .header-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.3);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    .header-card h1 {
      color: #2c3e50;
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .header-card p {
      color: #6c757d;
      font-size: 1.1rem;
      margin-bottom: 1rem;
    }

    .class-info {
      display: inline-flex;
      gap: 2rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 1rem;
    }

    .info-item {
      background: rgba(52, 152, 219, 0.1);
      padding: 0.5rem 1rem;
      border-radius: 12px;
      border: 1px solid rgba(52, 152, 219, 0.3);
      color: #2c3e50;
      font-weight: 600;
    }

    .slip-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      border: 1px solid rgba(255, 255, 255, 0.3);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .subject-section {
      margin-bottom: 3rem;
    }

    .subject-header {
      background: linear-gradient(135deg, #3498db, #2980b9);
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      font-size: 1.3rem;
      font-weight: 700;
      text-align: center;
      box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

    .marks-table {
      width: 100%;
      border-collapse: collapse;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      background: white;
    }

    .marks-table th {
      background: linear-gradient(135deg, #34495e, #2c3e50);
      color: white;
      padding: 1rem;
      text-align: center;
      font-weight: 600;
      font-size: 1rem;
    }

    .marks-table td {
      padding: 1rem;
      text-align: center;
      border-bottom: 1px solid #e9ecef;
      font-weight: 500;
    }

    .marks-table tr:nth-child(even) {
      background-color: #f8f9fa;
    }

    .marks-table tr:hover {
      background-color: #e3f2fd;
      transform: translateY(-1px);
      transition: all 0.3s ease;
    }

    .student-info {
      background: rgba(52, 152, 219, 0.05) !important;
      font-weight: 600;
      color: #2c3e50;
    }

    .percentage-cell {
      font-weight: 700;
      font-size: 1.1rem;
    }

    .grade {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 25px;
      font-weight: bold;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .grade-a-plus {
      background: linear-gradient(135deg, #27ae60, #2ecc71);
      color: white;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .grade-a {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .grade-b-plus {
      background: linear-gradient(135deg, #3498db, #2980b9);
      color: white;
      box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

    .grade-b {
      background: linear-gradient(135deg, #3498db, #1f618d);
      color: white;
      box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }

    .grade-c-plus {
      background: linear-gradient(135deg, #f39c12, #e67e22);
      color: white;
      box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
    }

    .grade-c {
      background: linear-gradient(135deg, #f39c12, #d68910);
      color: white;
      box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
    }

    .grade-d {
      background: linear-gradient(135deg, #e74c3c, #c0392b);
      color: white;
      box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

    .grade-e {
      background: linear-gradient(135deg, #95a5a6, #7f8c8d);
      color: white;
      box-shadow: 0 4px 15px rgba(149, 165, 166, 0.3);
    }

    .no-data {
      text-align: center;
      padding: 3rem;
      color: #6c757d;
      font-size: 1.2rem;
      background: rgba(108, 117, 125, 0.1);
      border-radius: 12px;
      border: 2px dashed #6c757d;
    }

    /* Mobile Responsiveness */
    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }

      .header-card {
        padding: 1.5rem;
      }

      .header-card h1 {
        font-size: 2rem;
      }

      .class-info {
        gap: 1rem;
      }

      .info-item {
        padding: 0.4rem 0.8rem;
        font-size: 0.9rem;
      }

      .slip-container {
        padding: 1rem;
      }

      .marks-table {
        font-size: 0.9rem;
      }

      .marks-table th,
      .marks-table td {
        padding: 0.7rem 0.5rem;
      }

      .subject-header {
        font-size: 1.1rem;
        padding: 0.8rem 1rem;
      }
    }

    /* Print Styles */
    @media print {
      body {
        background: white;
        color: black;
      }

      .container {
        max-width: none;
      }

      .header-card,
      .slip-container {
        background: white;
        box-shadow: none;
        border: 1px solid #ddd;
      }

      .subject-header {
        background: #f8f9fa !important;
        color: black !important;
        border: 1px solid #ddd;
      }

      .marks-table th {
        background: #f8f9fa !important;
        color: black !important;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header-card">
      <h2>Theme Evaluation Report Generator</h2>
      <div class="form-group" style="margin-top: 20px; text-align: left;">
        <label for="classSelector" style="display: block; margin-bottom: 8px; font-weight: 600; color: #2c3e50;">Select Class and Section:</label>
        <select id="classSelector">
          <option value="" selected disabled>-- Select a class and section --</option>
          <% 
            // Sort studentClassdata by class number
            const sortedClassData = [...studentClassdata].sort((a, b) => {
              // Convert class to number for proper numeric sorting
              const classA = parseInt(a.studentClass);
              const classB = parseInt(b.studentClass);
              
              // First sort by class number
              if (classA !== classB) {
                return classA - classB;
              }
              
              // If same class, sort by section
              return a.section.localeCompare(b.section);
            });
            
            // Group by class for optgroup
            const classGroups = {};
            sortedClassData.forEach(item => {
              const classNum = item.studentClass;
              if (!classGroups[classNum]) {
                classGroups[classNum] = [];
              }
              classGroups[classNum].push(item);
            });
            
            // Get sorted class numbers
            const sortedClassNumbers = Object.keys(classGroups).sort((a, b) => parseInt(a) - parseInt(b));
            
            // Loop through each class group
            sortedClassNumbers.forEach(classNum => {
              const sections = classGroups[classNum];
          %>
            <optgroup label="Class <%= classNum %> ðŸ“š">
            <% sections.forEach(studentclass => { %>
              <option 
                value="<%=studentclass.section.trim()%>"
                data-class="<%=studentclass.studentClass%>"
                data-section="<%=studentclass.section%>">
                Class <%= studentclass.studentClass %> - Section <%= studentclass.section %>
              </option>
            <% }); %>
            </optgroup>
          <% }); %>
        </select>
      </div>

      <button id="showMarksBtn" onclick="showMarks()">Generate Theme Marks Report</button>
      
      <div class="note" style="margin-top: 15px; padding: 10px; background: rgba(52, 152, 219, 0.1); border-radius: 8px; text-align: left; font-size: 0.9rem; color: #34495e;">
        <strong>Note:</strong> This report will show theme evaluation marks for all students in the selected class/section. 
        You can optionally filter by subject to see marks for a specific subject only.
      </div>
    </div>
  </div>
  
  <div class="container" id="resultsContainer" <% if (!themeslip || themeslip.length === 0) { %>style="display: none;"<% } %>>
    <div class="header-card">
      <h1>Theme Evaluation Slip</h1>
      <p>Academic Performance Report</p>
      <% if (studentClass && section) { %>
        <div class="class-info">
          <div class="info-item">Class: <%= studentClass %></div>
          <div class="info-item">Section: <%= section %></div>
          <% if (subject) { %>
            <div class="info-item">Subject: <%= subject %></div>
          <% } %>
        </div>
      <% } %>
    </div>

    <div class="slip-container">
      <% if (themeslip && themeslip.length > 0) { %>
        <% 
          // Group data by subject
          const subjectGroups = {};
          themeslip.forEach(student => {
            student.subjects.forEach(subjectData => {
              if (!subjectGroups[subjectData.name]) {
                subjectGroups[subjectData.name] = [];
              }
              subjectGroups[subjectData.name].push({
                student: {
                  name: student.name,
                  roll: student.roll,
                  class: student.studentClass,
                  section: student.section
                },
                themes: subjectData.themes
              });
            });
          });
        %>
        
        <% Object.keys(subjectGroups).forEach(subjectName => { %>
          <div class="subject-section">
            <div class="subject-header">
              Subject: <%= subjectName %>
            </div>
            
            <table class="marks-table">
              <thead>
                <tr>
                  <th>Roll No.</th>
                  <th>Student Name</th>
                  <th>Total Themes</th>
                  <th>Total Learning Outcomes</th>
                  <th>Marks Obtained</th>
                  <th>Maximum Marks</th>
                  <th>Percentage</th>
                  <th>Grade</th>
                </tr>
              </thead>
              <tbody>
                <% 
                  // Calculate maxPossibleMarks for this subject (sum of all indicator marks from all themes and learning outcomes)
                  let maxPossibleMarks = 0;
                  let totalThemesArr = [];
                  let totalLearningOutcomesArr = [];
                  subjectGroups[subjectName].forEach(studentData => {
                    studentData.themes.forEach(theme => {
                      totalThemesArr.push(theme);
                      if (theme.learningOutcomes) {
                        theme.learningOutcomes.forEach(lo => {
                          totalLearningOutcomesArr.push(lo);
                          if (lo.indicators) {
                            lo.indicators.forEach(ind => {
                              // Use indicatorsMarks as max marks if present, else fallback to maxMarks or 0
                              maxPossibleMarks += (ind.indicatorsMarks || ind.maxMarks || 0);
                            });
                          }
                        });
                      }
                    });
                  });
                  // Remove duplicates for themes and learning outcomes
                  const uniqueThemes = Array.from(new Set(totalThemesArr.map(t => t.themeName))).length;
                  const uniqueLearningOutcomes = Array.from(new Set(totalLearningOutcomesArr.map(lo => lo.learningOutcomeName))).length;
                %>
                <% subjectGroups[subjectName].forEach(studentData => { %>
                  <%
                    // Calculate totals for this student in this subject
                    const totalThemes = studentData.themes.length;
                    const totalLearningOutcomes = studentData.themes.reduce((acc, theme) => 
                      acc + (theme.learningOutcomes ? theme.learningOutcomes.length : 0), 0
                    );
                    const totalMarksObtained = studentData.themes.reduce((acc, theme) => 
                      acc + (theme.overallTotalAfter || 0), 0
                    );
                    // Use the fixed maxPossibleMarks for all students in this subject
                    // Calculate percentage
                    const percentage = maxPossibleMarks > 0 ? 
                      ((totalMarksObtained / maxPossibleMarks) * 100).toFixed(2) : 0;
                    // Determine grade based on percentage
                    let gradeClass = '';
                    let gradeText = '';
                    if (percentage >= 90) {
                      gradeClass = 'grade-a-plus';
                      gradeText = 'A+';
                    } else if (percentage >= 80) {
                      gradeClass = 'grade-a';
                      gradeText = 'A';
                    } else if (percentage >= 70) {
                      gradeClass = 'grade-b-plus';
                      gradeText = 'B+';
                    } else if (percentage >= 60) {
                      gradeClass = 'grade-b';
                      gradeText = 'B';
                    } else if (percentage >= 50) {
                      gradeClass = 'grade-c-plus';
                      gradeText = 'C+';
                    } else if (percentage >= 40) {
                      gradeClass = 'grade-c';
                      gradeText = 'C';
                    } else if (percentage >= 20) {
                      gradeClass = 'grade-d';
                      gradeText = 'D';
                    } else {
                      gradeClass = 'grade-e';
                      gradeText = 'E';
                    }
                  %>
                  <tr>
                    <td class="student-info"><%= studentData.student.roll %></td>
                    <td class="student-info"><%= studentData.student.name %></td>
                    <td><%= totalThemes %></td>
                    <td><%= totalLearningOutcomes %></td>
                    <td><%= totalMarksObtained %></td>
                    <td><%= maxPossibleMarks %></td>
                    <td class="percentage-cell"><%= percentage %>%</td>
                    <td>
                      <span class="grade <%= gradeClass %>"><%= gradeText %></span>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
        <% }) %>
      <% } else { %>
        <div class="no-data">
          <h3>No Data Available</h3>
          <p>No theme evaluation records found for the selected criteria.</p>
          <% if (studentClass) { %>
            <p style="margin-top: 15px; font-size: 0.9rem; color: #6c757d;">
              No records found for Class <%= studentClass %><% if (section) { %> Section <%= section %><% } %>.
            </p>
            <button onclick="window.location.href='/themeslip'" style="margin-top: 20px; background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 8px; cursor: pointer;">
              Select Different Class
            </button>
          <% } %>
        </div>
      <% } %>
    </div>
  </div>

  <script>
    // Function to show marks based on selected class and section
    function showMarks() {
      const selector = document.getElementById('classSelector');
      const selectedOption = selector.options[selector.selectedIndex];
      
      if (!selectedOption || selectedOption.disabled) {
        alert('Please select a class and section first');
        return;
      }
      
      // Get class and section from the data attributes of the selected option
      const studentClass = selectedOption.getAttribute('data-class');
      const section = selectedOption.getAttribute('data-section');
      
      // Redirect to the same page with query parameters
      window.location.href = `/themeslip?studentClass=${studentClass}&section=${section}`;
    }
    
    // Print functionality
    function printSlip() {
      window.print();
    }
    
    // Add print button functionality
    document.addEventListener('DOMContentLoaded', function() {
      // Add print button to header if needed
      const headerCard = document.querySelector('.header-card');
      if (headerCard) {
        const printBtn = document.createElement('button');
        printBtn.textContent = 'Print Slip';
        printBtn.style.cssText = `
          background: linear-gradient(135deg, #27ae60, #2ecc71);
          color: white;
          border: none;
          padding: 0.75rem 1.5rem;
          border-radius: 12px;
          font-weight: 600;
          cursor: pointer;
          margin-top: 1rem;
          box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
          transition: all 0.3s ease;
        `;
        printBtn.onmouseover = function() {
          this.style.transform = 'translateY(-2px)';
          this.style.boxShadow = '0 6px 20px rgba(39, 174, 96, 0.4)';
        };
        printBtn.onmouseout = function() {
          this.style.transform = 'translateY(0)';
          this.style.boxShadow = '0 4px 15px rgba(39, 174, 96, 0.3)';
        };
        printBtn.onclick = printSlip;
        headerCard.appendChild(printBtn);
      }
      
      // Style the class selector and button for better appearance
      const classSelector = document.getElementById('classSelector');
      if (classSelector) {
        classSelector.style.cssText = `
          width: 100%;
          padding: 0.75rem 1rem;
          border: 2px solid #e9ecef;
          border-radius: 12px;
          font-size: 1rem;
          margin-bottom: 1rem;
          background: white;
        `;
      }
      
      const showMarksBtn = document.getElementById('showMarksBtn');
      if (showMarksBtn) {
        showMarksBtn.style.cssText = `
          background: linear-gradient(135deg, #3498db, #2980b9);
          color: white;
          border: none;
          padding: 0.75rem 1.5rem;
          border-radius: 12px;
          font-weight: 600;
          cursor: pointer;
          margin: 1rem 0;
          width: 100%;
          box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
          transition: all 0.3s ease;
        `;
        showMarksBtn.onmouseover = function() {
          this.style.transform = 'translateY(-2px)';
          this.style.boxShadow = '0 6px 20px rgba(52, 152, 219, 0.4)';
        };
        showMarksBtn.onmouseout = function() {
          this.style.transform = 'translateY(0)';
          this.style.boxShadow = '0 4px 15px rgba(52, 152, 219, 0.3)';
        };
      }
    });
  </script>
</body>
</html>