<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Health Practicals Configuration</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      color: #1a1a1a;
      min-height: 100vh;
      line-height: 1.6;
      padding: 2rem 1rem;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
    }

    .header-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      text-align: center;
      margin-bottom: 2rem;
    }

    .header-card h2 {
      color: #27ae60;
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .header-card p {
      color: #7f8c8d;
      font-size: 1rem;
    }

    .form-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 2rem;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .form-group {
      position: relative;
    }

    .form-group.full-width {
      grid-column: 1 / -1;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      color: #34495e;
      font-weight: 600;
      font-size: 0.9rem;
    }

    input[type="text"], 
    input[type="number"],
    textarea {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(255, 255, 255, 0.8);
      color: #2c3e50;
      font-family: inherit;
      line-height: 1.5;
    }

    textarea {
      min-height: 50px;
      resize: vertical;
      overflow: hidden;
    }

    input[type="text"]:focus, 
    input[type="number"]:focus,
    textarea:focus {
      outline: none;
      border-color: #27ae60;
      box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.1);
      background: rgba(255, 255, 255, 1);
    }

    input[readonly] {
      background: #f8f9fa;
      color: #6c757d;
    }

    .unit-section {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid rgba(39, 174, 96, 0.3);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
      animation: slideIn 0.3s ease-out;
    }

    .unit-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.75rem;
      border-bottom: 2px solid rgba(39, 174, 96, 0.2);
    }

    .unit-header h3 {
      color: #27ae60;
      margin: 0;
      font-size: 1.4rem;
      font-weight: 700;
    }

    .practical-item {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-bottom: 0.5rem;
      padding: 0.75rem;
      background: rgba(39, 174, 96, 0.05);
      border-radius: 8px;
      border-left: 3px solid #27ae60;
    }

    .practical-item input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 0.9rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 12px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }

    .btn-success {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .btn-danger {
      background: linear-gradient(135deg, #e74c3c, #c0392b);
      color: white;
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
      box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
    }

    .btn-danger:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
    }

    .btn-warning {
      background: linear-gradient(135deg, #f39c12, #e67e22);
      color: white;
      box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
    }

    .btn-warning:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
    }

    .btn-group {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      justify-content: center;
      margin: 1rem 0;
    }

    .submit-section {
      text-align: center;
      margin-top: 2rem;
    }

    .submit-btn {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      padding: 1rem 3rem;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
      min-width: 200px;
    }

    .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .practicals-container {
      margin: 1rem 0;
    }

    .project-item {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-bottom: 0.5rem;
      padding: 0.75rem;
      background: rgba(52, 152, 219, 0.05);
      border-radius: 8px;
      border-left: 3px solid #3498db;
    }

    .project-item input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 0.9rem;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      body {
        padding: 1rem 0.5rem;
      }

      .form-row {
        grid-template-columns: 1fr;
      }

      .unit-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .practical-item {
        flex-direction: column;
        align-items: stretch;
      }

      .form-card {
        padding: 1.5rem;
      }

      .header-card {
        padding: 1.5rem;
      }

      .header-card h2 {
        font-size: 1.5rem;
      }
    }

    /* Animation for adding elements */
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .science-icon {
      font-size: 1.5rem;
      margin-right: 0.5rem;
    }

    .unit-number {
      background: #27ae60;
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
    }

    /* Radio button styling */
    input[type="radio"] {
      width: 18px;
      height: 18px;
      accent-color: #27ae60;
      cursor: pointer;
    }

    .radio-group {
      display: flex;
      gap: 1.5rem;
      flex-wrap: wrap;
      align-items: center;
    }

    .radio-option {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      cursor: pointer;
      font-weight: normal;
      color: #34495e;
      padding: 0.5rem 0.75rem;
      border-radius: 8px;
      transition: background-color 0.2s ease;
    }

    .radio-option:hover {
      background-color: rgba(39, 174, 96, 0.1);
    }

    .radio-option input[type="radio"]:checked + span {
      color: #27ae60;
      font-weight: 600;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header-card">
      <h2><span class="science-icon"></span><%= subject %> Practicals/Project Configuration</h2>
      <p>Set up units and practicals for science evaluation</p>
      <% if (typeof studentClass !== 'undefined') { %>
        <div style="background-color: #d5f4e6; padding: 10px; margin-top: 15px; border-radius: 8px; font-weight: bold; color: #27ae60;">
          Configuring <%= subject %> Practicals for Class <%= studentClass %>
        </div>
      <% } %>
    </div>

    <div class="form-card">
      <form action="/sciencepractical?studentClass=<%= typeof studentClass !== 'undefined' ? studentClass : '' %><% if (typeof editing !== 'undefined' && editing && typeof lessonData !== 'undefined' && lessonData._id) { %>&lessonId=<%= lessonData._id %>&editing=true<% } %>" method="POST" id="sciencePracticalForm">
        
        <!-- Hidden field for lesson ID when editing -->
        <% if (typeof editing !== 'undefined' && editing && typeof lessonData !== 'undefined' && lessonData._id) { %>
          <input type="hidden" name="lessonId" value="<%= lessonData._id %>">
        <% } %>

        <div class="form-row">
          <div class="form-group">
            <label for="studentClass">Student Class</label>
            <input type="text" name="studentClass" id="studentClass" value="<%= typeof studentClass !== 'undefined' ? studentClass : '' %>" readonly>
          </div>
         
          <div class="form-group">
            <label for="subject">Subject</label>
            <input type="text" name="subject" id="subject" placeholder="Enter subject name (e.g., Science)" value="<%=subject%>" required>
          </div>
          <div class="form-group">
            <label for="academicYear">Terminal</label>
            <input type="text" name="terminal" id="academicYear" placeholder="Enter Terminal example: First, Second, Third" required value="<%=terminal%>">
          </div>
        </div>

        <div id="units-container">
          <!-- Units will be dynamically added here -->
        </div>
        <div class="btn-group">
          <button type="button" class="btn btn-success" onclick="addUnit()">+ Add Unit</button>
        </div>

        <div class="submit-section" style="display: flex; flex-direction: column; gap: 15px; align-items: center;">
          <button type="submit" class="submit-btn">Save Practicals</button>
          <a href="/themefillupform" style="text-decoration: none;">
            <button type="button" class="btn btn-warning" style="padding: 10px 20px; min-width: 200px;">
              Back to Theme Configuration
            </button>
          </a>
        </div>
      </form>
    </div>
  </div>

<!-- Existing Lesson Data Display Table -->
<% if (typeof lessonData !== 'undefined' && lessonData && lessonData.length > 0) { %>
<div class="form-card" style="margin-top: 2rem;">
  <div class="header-card" style="margin-bottom: 1rem; padding: 1rem;">
    <h3 style="color: #4a90e2; margin: 0;">📚 Existing Lesson Configuration</h3>
    <p style="margin: 0.5rem 0 0 0; color: #7f8c8d;">Current units and practicals setup</p>
  </div>
  
  <div class="table-container" style="overflow-x: auto; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
    <table class="data-table" style="width: 100%; border-collapse: collapse; background: white; border-radius: 12px; overflow: hidden;">
      <thead>
        <tr style="background: linear-gradient(135deg, #4a90e2, #357abd); color: white;">
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">S.N</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Unit Name</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Portion</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Practicals</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Project Works</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Terminal</th>
          <th style="padding: 1rem 0.75rem; text-align: center; font-weight: 600; border: none;">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% let globalUnitIndex = 0; %>
        <% lessonData.forEach((lesson) => { %>
          <% lesson.totalLessons.forEach((totalLesson) => { %>
            <% totalLesson.units.forEach((unit, unitIndex) => { %>
              <% globalUnitIndex++; %>
              <tr style="<%= globalUnitIndex % 2 === 0 ? 'background-color: #f8f9fa;' : 'background-color: white;' %> transition: all 0.3s ease;" 
                  onmouseover="this.style.backgroundColor='#e3f2fd'; this.style.transform='translateY(-1px)'" 
                  onmouseout="this.style.backgroundColor='<%= globalUnitIndex % 2 === 0 ? '#f8f9fa' : 'white' %>'; this.style.transform='translateY(0)'">
                
                <!-- Serial Number -->
                <td style="padding: 1rem 0.75rem; text-align: center; border: 1px solid #dee2e6; font-weight: 600; color: #4a90e2;">
                  <%= globalUnitIndex %>
                </td>
                
                <!-- Unit Name -->
                <td style="padding: 1rem 0.75rem; text-align: center; border: 1px solid #dee2e6; font-weight: 500; color: #2c3e50;">
                  <div >
                    <%= unit.unitName || 'N/A' %>
                  </div>
                </td>
                
                <!-- Portion -->
                <td style="padding: 1rem 0.75rem; text-align: center; border: 1px solid #dee2e6; color: #5a6c7d;">
                  <%= unit.portion || 'Not specified' %>
                </td>
                
                <!-- Practicals -->
                <td style="padding: 1rem 0.75rem; border: 1px solid #dee2e6;">
                  <% if (unit.practicals && unit.practicals.length > 0) { %>
                    <div style="display: flex; flex-wrap: wrap; gap: 0.4rem; justify-content: center;">
                      <% unit.practicals.forEach((practical, pIndex) => { %>
                        <span >
                          P<%= pIndex + 1 %>: <%= practical %>
                        </span>
                      <% }); %>
                    </div>
                  <% } else { %>
                    <span style="color: #95a5a6; font-style: italic; font-size: 0.9rem;">No practicals</span>
                  <% } %>
                </td>
                
                <!-- Project Works -->
                <td style="padding: 1rem 0.75rem; border: 1px solid #dee2e6;">
                  <% if (unit.projectworks && unit.projectworks.length > 0) { %>
                    <div style="display: flex; flex-wrap: wrap; gap: 0.4rem; justify-content: center;">
                      <% unit.projectworks.forEach((project, projIndex) => { %>
                        <span style=" border-radius: 12px; font-size: 0.8rem; font-weight: 500; display: inline-block;">
                          PW<%= projIndex + 1 %>: <%= project %>
                        </span>
                      <% }); %>
                    </div>
                  <% } else { %>
                    <span style="color: #95a5a6; font-style: italic; font-size: 0.9rem;">No projects</span>
                  <% } %>
                </td>
                
                <!-- Terminal -->
                <td style="padding: 1rem 0.75rem; text-align: center; border: 1px solid #dee2e6;">
                  <div style=" padding: 0.4rem 0.8rem; border-radius: 15px; display: inline-block; font-size: 0.85rem; font-weight: 600;">
                    <%= totalLesson.terminal || 'N/A' %>
                  </div>
                </td>
                
                <!-- Actions -->
                <td style="padding: 1rem 0.75rem; text-align: center; border: 1px solid #dee2e6;">
                  <div style="display: flex; gap: 0.5rem; justify-content: center; align-items: center;">
                    <a href="/editlessondata?lessonId=<%= totalLesson._id %>&studentClass=<%= studentClass %>&terminal=<%= terminal%>&editing=true" style="text-decoration: none;">
                      <button type="button" style="background: linear-gradient(135deg, #1286f3, #82b8f1); color: white; border: none; padding: 0.5rem 0.8rem; border-radius: 8px; cursor: pointer; font-size: 0.8rem; font-weight: 500; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(243, 156, 18, 0.3);" 
                              onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(243, 156, 18, 0.4)'"
                              onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(243, 156, 18, 0.3)'">
                         Edit
                      </button>
                    </a>
                    <a href="/deletelessondata?lessonId=<%= totalLesson._id %>&studentClass=<%= studentClass %>&terminal=<%= terminal %>&subject=<%= subject %>&section=<%= section %>" onclick="return confirm('Are you sure you want to delete this lesson data?')" style="text-decoration: none;">
                      <button type="button" style="background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; border: none; padding: 0.5rem 0.8rem; border-radius: 8px; cursor: pointer; font-size: 0.8rem; font-weight: 500; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);"
                              onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(231, 76, 60, 0.4)'"
                              onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(231, 76, 60, 0.3)'">
                        🗑️ Delete
                      </button>
                    </a>
                  </div>
                </td>
              </tr>
            <% }); %>
          <% }); %>
        <% }); %>
      </tbody>
    </table>
  </div>
  
  <!-- Summary Statistics -->
  <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-top: 1.5rem;">
    <div style="background: linear-gradient(135deg, #27ae60, #229954); color: white; padding: 1rem; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);">
      <div style="font-size: 1.5rem; font-weight: 700;">
        <%= lessonData.reduce((acc, lesson) => acc + lesson.totalLessons.reduce((subAcc, totalLesson) => subAcc + totalLesson.units.length, 0), 0) %>
      </div>
      <div style="font-size: 0.9rem; opacity: 0.9; margin-top: 0.25rem;">Total Units</div>
    </div>
    
    <div style="background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 1rem; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);">
      <div style="font-size: 1.5rem; font-weight: 700;">
        <%= lessonData.reduce((acc, lesson) => acc + lesson.totalLessons.reduce((subAcc, totalLesson) => subAcc + totalLesson.units.reduce((unitAcc, unit) => unitAcc + (unit.practicals ? unit.practicals.length : 0), 0), 0), 0) %>
      </div>
      <div style="font-size: 0.9rem; opacity: 0.9; margin-top: 0.25rem;">Total Practicals</div>
    </div>
    
    <div style="background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 1rem; border-radius: 12px; text-align: center; box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);">
      <div style="font-size: 1.5rem; font-weight: 700;">
        <%= lessonData.reduce((acc, lesson) => acc + lesson.totalLessons.reduce((subAcc, totalLesson) => subAcc + totalLesson.units.reduce((unitAcc, unit) => unitAcc + (unit.projectworks ? unit.projectworks.length : 0), 0), 0), 0) %>
      </div>
      <div style="font-size: 0.9rem; opacity: 0.9; margin-top: 0.25rem;">Total Projects</div>
    </div>
  </div>
</div>
<% } else { %>
<div class="form-card" style="margin-top: 2rem; text-align: center; padding: 2rem;">
  <div style="color: #95a5a6; font-size: 1.1rem;">
    <i style="font-size: 2rem; margin-bottom: 1rem; display: block;">📚</i>
    No existing lesson data found. Create your first unit above!
  </div>
</div>
<% } %>

  <script>
    let unitIndex = 0;
    let editing = <%= typeof editing !== 'undefined' && editing ? 'true' : 'false' %>;
    let editingLessonData = editing ? <%- typeof lessonData !== 'undefined' && lessonData ? JSON.stringify(lessonData) : 'null' %> : null;

    // Auto-resize textarea function
    function autoResize(textarea) {
      // Reset height to auto to get the correct scrollHeight
      textarea.style.height = 'auto';
      
      // Calculate the new height based on scrollHeight
      const newHeight = Math.max(textarea.scrollHeight, 50); // Minimum 50px
      const maxHeight = 200; // Maximum 200px
      
      // Set the height, but not more than maxHeight
      textarea.style.height = Math.min(newHeight, maxHeight) + 'px';
      
      // If content exceeds maxHeight, enable scrolling
      if (newHeight > maxHeight) {
        textarea.style.overflowY = 'auto';
      } else {
        textarea.style.overflowY = 'hidden';
      }
    }

    // Initialize auto-resize for existing textareas
    function initializeAutoResize() {
      document.querySelectorAll('textarea').forEach(textarea => {
        autoResize(textarea);
        
        // Add event listeners for dynamic resizing
        textarea.addEventListener('input', function() {
          autoResize(this);
        });
        
        textarea.addEventListener('paste', function() {
          // Delay to allow paste content to be processed
          setTimeout(() => autoResize(this), 10);
        });
      });
    }

    function addUnit(unitData = null) {
      const unitsContainer = document.getElementById('units-container');

      const unitDiv = document.createElement('div');
      unitDiv.className = 'unit-section';
      unitDiv.dataset.index = unitIndex;

      unitDiv.innerHTML = `
        <div class="unit-header">
          <h3><span class="unit-number">Unit ${unitIndex + 1}</span> <span style="margin-left: 0.5rem;">Unit Details</span></h3>
          <button type="button" class="btn btn-danger" onclick="removeUnit(this)">Remove Unit</button>
        </div>
        
        <div class="form-group" style="margin-bottom: 1rem;">
          <label for="unitName_${unitIndex}">Unit Name</label>
          <textarea name="units[${unitIndex}][unitName]" id="unitName_${unitIndex}" placeholder="Enter unit name" required rows="1" 
                    oninput="autoResize(this)">${unitData ? unitData.unitName || '' : ''}</textarea>
        </div>
        
        <div class="form-group" style="margin-bottom: 1.5rem;">
          <label style="margin-bottom: 0.75rem; color: #27ae60; font-weight: 600;">Choose Portion for this Unit:</label>
          <div class="radio-group">
            <label class="radio-option">
              <input type="radio" name="units[${unitIndex}][portion]" value="Health" required ${unitData && unitData.portion === 'Health' ? 'checked' : ''}>
              <span>Health</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="units[${unitIndex}][portion]" value="Physical" required ${unitData && unitData.portion === 'Physical' ? 'checked' : ''}>
              <span>Physical</span>
            </label>
            <label class="radio-option">
              <input type="radio" name="units[${unitIndex}][portion]" value="CreativeSkill" required ${unitData && unitData.portion === 'CreativeSkill' ? 'checked' : ''}>
              <span>Creative Skill</span>
            </label>
          </div>
        </div>
        
        <!-- Practicals Section -->
        <div style="margin-bottom: 1.5rem;">
          <h4 style="color: #27ae60; margin-bottom: 0.75rem; font-size: 1.1rem; display: flex; align-items: center;">
           <span style="margin-left: 0.5rem;">
            <% if(subject==="SCIENCE") { %> 🧪 Practicals <% }else if(subject==="MATHEMATICS"){%> 📐 Practical/Project <% } else { %> 🏃 Health Activities <% } %>
            </span>
          </h4>
          <div class="practicals-container" id="practicals-${unitIndex}"></div>
          <div class="btn-group" style="justify-content: flex-start; margin-top: 0.5rem;">
            <button type="button" class="btn btn-success" onclick="addPractical(${unitIndex})" style="padding: 0.5rem 1rem; font-size: 0.9rem;">+ Add <% if(subject==="SCIENCE") { %> 🧪 Practicals <% }else if(subject==="MATHEMATICS"){%> 📐 Practical/Project <% } else { %> 🏃 Health Activity <% } %></button>
          </div>
        </div>
        <% if (subject==="SCIENCE"){%>
        <!-- Project Work Section -->
        <div style="margin-bottom: 1rem;">
          <h4 style="color: #3498db; margin-bottom: 0.75rem; font-size: 1.1rem; display: flex; align-items: center;">
            📋 <span style="margin-left: 0.5rem;">Project Work</span>
          </h4>
          <div class="projects-container" id="projects-${unitIndex}"></div>
          <div class="btn-group" style="justify-content: flex-start; margin-top: 0.5rem;">
            <button type="button" class="btn btn-success" onclick="addProjectWork(${unitIndex})" style="padding: 0.5rem 1rem; font-size: 0.9rem; background: linear-gradient(135deg, #3498db, #2980b9);">+ Add Project Work</button>
          </div>
        </div>
        <%}%>
      `;
      
      unitsContainer.appendChild(unitDiv);
      
      // Add practicals based on edit data or add one empty practical
      if (unitData && unitData.practicals && unitData.practicals.length > 0) {
        unitData.practicals.forEach((practicalName, index) => {
          addPracticalWithData(unitIndex, practicalName);
        });
      } else {
        addPractical(unitIndex); // Add one practical by default
      }
      
      // Add project works if editing and has project data
      if (unitData && unitData.projectworks && unitData.projectworks.length > 0) {
        unitData.projectworks.forEach((projectName, index) => {
          addProjectWorkWithData(unitIndex, projectName);
        });
      }
      
      // Initialize auto-resize for new textareas
      setTimeout(() => {
        unitDiv.querySelectorAll('textarea').forEach(textarea => {
          autoResize(textarea);
        });
      }, 10);
      
      unitIndex++;
    }

    function addPractical(unitIdx) {
      const practicalsContainer = document.getElementById(`practicals-${unitIdx}`);
      const practicalIndex = practicalsContainer.children.length;

      const practicalDiv = document.createElement('div');
      practicalDiv.className = 'practical-item';

      practicalDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #27ae60; font-weight: 600; min-width: 80px;">Activity ${practicalIndex + 1}:</span>
          <textarea name="units[${unitIdx}][practicals][${practicalIndex}]" placeholder="Enter activity name (e.g., Physical fitness test)" required 
                    style="flex: 1;" rows="1" oninput="autoResize(this)"></textarea>
          <button type="button" class="btn btn-danger" onclick="removePractical(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      practicalsContainer.appendChild(practicalDiv);
      
      // Initialize auto-resize for the new textarea
      const textarea = practicalDiv.querySelector('textarea');
      if (textarea) {
        setTimeout(() => autoResize(textarea), 10);
      }
    }

    function addPracticalWithData(unitIdx, practicalName) {
      const practicalsContainer = document.getElementById(`practicals-${unitIdx}`);
      const practicalIndex = practicalsContainer.children.length;

      const practicalDiv = document.createElement('div');
      practicalDiv.className = 'practical-item';

      practicalDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #27ae60; font-weight: 600; min-width: 80px;">Activity ${practicalIndex + 1}:</span>
          <textarea name="units[${unitIdx}][practicals][${practicalIndex}]" placeholder="Enter activity name" required 
                    style="flex: 1;" rows="1" oninput="autoResize(this)">${practicalName}</textarea>
          <button type="button" class="btn btn-danger" onclick="removePractical(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      practicalsContainer.appendChild(practicalDiv);
      
      // Initialize auto-resize for the new textarea
      const textarea = practicalDiv.querySelector('textarea');
      if (textarea) {
        setTimeout(() => autoResize(textarea), 10);
      }
    }

    function addProjectWork(unitIdx) {
      const projectsContainer = document.getElementById(`projects-${unitIdx}`);
      const projectIndex = projectsContainer.children.length;

      const projectDiv = document.createElement('div');
      projectDiv.className = 'project-item';

      projectDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #3498db; font-weight: 600; min-width: 90px;">Project ${projectIndex + 1}:</span>
          <textarea name="units[${unitIdx}][projectworks][${projectIndex}]" placeholder="Enter project work (e.g., Health awareness campaign)" required 
                    style="flex: 1;" rows="1" oninput="autoResize(this)"></textarea>
          <button type="button" class="btn btn-danger" onclick="removeProjectWork(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      projectsContainer.appendChild(projectDiv);
      
      // Initialize auto-resize for the new textarea
      const textarea = projectDiv.querySelector('textarea');
      if (textarea) {
        setTimeout(() => autoResize(textarea), 10);
      }
    }

    function addProjectWorkWithData(unitIdx, projectName) {
      const projectsContainer = document.getElementById(`projects-${unitIdx}`);
      const projectIndex = projectsContainer.children.length;

      const projectDiv = document.createElement('div');
      projectDiv.className = 'project-item';

      projectDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #3498db; font-weight: 600; min-width: 90px;">Project ${projectIndex + 1}:</span>
          <textarea name="units[${unitIdx}][projectworks][${projectIndex}]" placeholder="Enter project work" required 
                    style="flex: 1;" rows="1" oninput="autoResize(this)">${projectName}</textarea>
          <button type="button" class="btn btn-danger" onclick="removeProjectWork(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      projectsContainer.appendChild(projectDiv);
      
      // Initialize auto-resize for the newly added textarea
      setTimeout(() => {
        const newTextarea = projectDiv.querySelector('textarea');
        if (newTextarea) {
          autoResize(newTextarea);
        }
      }, 0);
    }

    function removeUnit(button) {
      if (confirm('Are you sure you want to remove this unit and all its activities?')) {
        button.closest('.unit-section').remove();
        updateUnitNumbers();
      }
    }

    function removePractical(button) {
      if (confirm('Are you sure you want to remove this activity?')) {
        button.closest('.practical-item').remove();
      }
    }

    function removeProjectWork(button) {
      if (confirm('Are you sure you want to remove this project work?')) {
        button.closest('.project-item').remove();
      }
    }

    function updateUnitNumbers() {
      const units = document.querySelectorAll('.unit-section');
      units.forEach((unit, index) => {
        const unitNumber = unit.querySelector('.unit-number');
        if (unitNumber) {
          unitNumber.textContent = `Unit ${index + 1}`;
        }
      });
    }

    // Single window.onload function
    window.onload = () => {
      if (editing && editingLessonData && editingLessonData.units) {
        // Populate existing units when editing
        editingLessonData.units.forEach(unitData => {
          addUnit(unitData);
        });
        
        // Pre-fill form fields
        if (editingLessonData.subject) {
          document.getElementById('subject').value = editingLessonData.subject;
        }
        if (editingLessonData.terminal) {
          document.getElementById('academicYear').value = editingLessonData.terminal;
        }
      } else {
        // Add empty unit for new forms
        addUnit();
      }
      
      // Initialize auto-resize for all existing textareas
      setTimeout(() => {
        const textareas = document.querySelectorAll('textarea');
        textareas.forEach(textarea => {
          autoResize(textarea);
        });
      }, 100);
    };

    // Form validation
    document.getElementById('sciencePracticalForm').addEventListener('submit', function(e) {
      // Debug: Log form data before submission
      const formData = new FormData(this);
      console.log('Form data being submitted:');
      for (let [key, value] of formData.entries()) {
        console.log(key + ':', value);
      }
      
      // Ensure all units have projectworks fields, even if empty
      const units = document.querySelectorAll('.unit-section');
      units.forEach((unit, unitIndex) => {
        const projectsContainer = unit.querySelector(`#projects-${unitIndex}`);
        if (projectsContainer && projectsContainer.children.length === 0) {
          // Add hidden input for empty projectworks array
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = `units[${unitIndex}][projectworks]`;
          hiddenInput.value = '';
          this.appendChild(hiddenInput);
        }
      });
      
      if (units.length === 0) {
        e.preventDefault();
        alert('Please add at least one unit before submitting.');
        return;
      }

      let hasValidUnit = false;
      units.forEach(unit => {
        const practicals = unit.querySelectorAll('.practical-item');
        const projects = unit.querySelectorAll('.project-item');
        if (practicals.length > 0 || projects.length > 0) {
          hasValidUnit = true;
        }
      });

      if (!hasValidUnit) {
        e.preventDefault();
        alert('Each unit must have at least one activity.');
        return;
      }
    });
  </script>
</body>
</html>