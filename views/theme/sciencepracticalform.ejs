<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Science Practicals Configuration</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      color: #1a1a1a;
      min-height: 100vh;
      line-height: 1.6;
      padding: 2rem 1rem;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
    }

    .header-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      text-align: center;
      margin-bottom: 2rem;
    }

    .header-card h2 {
      color: #27ae60;
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .header-card p {
      color: #7f8c8d;
      font-size: 1rem;
    }

    .form-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 2rem;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .form-group {
      position: relative;
    }

    .form-group.full-width {
      grid-column: 1 / -1;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      color: #34495e;
      font-weight: 600;
      font-size: 0.9rem;
    }

    input[type="text"], 
    input[type="number"] {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(255, 255, 255, 0.8);
      color: #2c3e50;
    }

    input[type="text"]:focus, 
    input[type="number"]:focus {
      outline: none;
      border-color: #27ae60;
      box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.1);
      background: rgba(255, 255, 255, 1);
    }

    input[readonly] {
      background: #f8f9fa;
      color: #6c757d;
    }

    .unit-section {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid rgba(39, 174, 96, 0.3);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
      animation: slideIn 0.3s ease-out;
    }

    .unit-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.75rem;
      border-bottom: 2px solid rgba(39, 174, 96, 0.2);
    }

    .unit-header h3 {
      color: #27ae60;
      margin: 0;
      font-size: 1.4rem;
      font-weight: 700;
    }

    .practical-item {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-bottom: 0.5rem;
      padding: 0.75rem;
      background: rgba(39, 174, 96, 0.05);
      border-radius: 8px;
      border-left: 3px solid #27ae60;
    }

    .practical-item input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 0.9rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 12px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }

    .btn-success {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .btn-danger {
      background: linear-gradient(135deg, #e74c3c, #c0392b);
      color: white;
      padding: 0.5rem 1rem;
      font-size: 0.8rem;
      box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
    }

    .btn-danger:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
    }

    .btn-warning {
      background: linear-gradient(135deg, #f39c12, #e67e22);
      color: white;
      box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
    }

    .btn-warning:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
    }

    .btn-group {
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      justify-content: center;
      margin: 1rem 0;
    }

    .submit-section {
      text-align: center;
      margin-top: 2rem;
    }

    .submit-btn {
      background: linear-gradient(135deg, #27ae60, #229954);
      color: white;
      padding: 1rem 3rem;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
      min-width: 200px;
    }

    .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .practicals-container {
      margin: 1rem 0;
    }

    .project-item {
      display: flex;
      gap: 0.5rem;
      align-items: center;
      margin-bottom: 0.5rem;
      padding: 0.75rem;
      background: rgba(52, 152, 219, 0.05);
      border-radius: 8px;
      border-left: 3px solid #3498db;
    }

    .project-item input {
      flex: 1;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 0.9rem;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      body {
        padding: 1rem 0.5rem;
      }

      .form-row {
        grid-template-columns: 1fr;
      }

      .unit-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .practical-item {
        flex-direction: column;
        align-items: stretch;
      }

      .form-card {
        padding: 1.5rem;
      }

      .header-card {
        padding: 1.5rem;
      }

      .header-card h2 {
        font-size: 1.5rem;
      }
    }

    /* Animation for adding elements */
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .science-icon {
      font-size: 1.5rem;
      margin-right: 0.5rem;
    }

    .unit-number {
      background: #27ae60;
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 50px;
      font-size: 0.8rem;
      font-weight: 600;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header-card">
      <h2><span class="science-icon">ðŸ§ª</span>Science Practicals Configuration</h2>
      <p>Set up units and practicals for science evaluation</p>
      <% if (typeof studentClass !== 'undefined') { %>
        <div style="background-color: #d5f4e6; padding: 10px; margin-top: 15px; border-radius: 8px; font-weight: bold; color: #27ae60;">
          Configuring Science Practicals for Class <%= studentClass %>
        </div>
      <% } %>
    </div>

    <div class="form-card">
      <form action="/sciencepractical?studentClass=<%= typeof studentClass !== 'undefined' ? studentClass : '' %>" method="POST" id="sciencePracticalForm">
        <div class="form-row">
          <div class="form-group">
            <label for="studentClass">Student Class</label>
            <input type="text" name="studentClass" id="studentClass" value="<%= typeof studentClass !== 'undefined' ? studentClass : '' %>" readonly>
          </div>
          <div class="form-group">
            <label for="section">Section (Optional)</label>
            <input type="text" name="section" id="section" placeholder="Enter section (optional)">
          </div>
          <div class="form-group">
            <label for="subject">Subject</label>
            <input type="text" name="subject" id="subject" placeholder="Enter subject name (e.g., Science)" required>
          </div>
          <div class="form-group">
            <label for="academicYear">Terminal</label>
            <input type="text" name="terminal" id="academicYear" placeholder="Enter Terminal example: First, Second, Third" required>
          </div>
        </div>

        <div id="units-container">
          <!-- Units will be dynamically added here -->
        </div>

        <div class="btn-group">
          <button type="button" class="btn btn-success" onclick="addUnit()">+ Add Unit</button>
        </div>

        <div class="submit-section" style="display: flex; flex-direction: column; gap: 15px; align-items: center;">
          <button type="submit" class="submit-btn">Save Science Practicals</button>
          <a href="/themefillupform" style="text-decoration: none;">
            <button type="button" class="btn btn-warning" style="padding: 10px 20px; min-width: 200px;">
              Back to Theme Configuration
            </button>
          </a>
        </div>
      </form>
    </div>
  </div>

  <script>
    let unitIndex = 0;

    function addUnit() {
      const unitsContainer = document.getElementById('units-container');

      const unitDiv = document.createElement('div');
      unitDiv.className = 'unit-section';
      unitDiv.dataset.index = unitIndex;

      unitDiv.innerHTML = `
        <div class="unit-header">
          <h3><span class="unit-number">Unit ${unitIndex + 1}</span> <span style="margin-left: 0.5rem;">Unit Details</span></h3>
          <button type="button" class="btn btn-danger" onclick="removeUnit(this)">Remove Unit</button>
        </div>
        
        <div class="form-group" style="margin-bottom: 1rem;">
          <label for="unitName_${unitIndex}">Unit Name</label>
          <input type="text" name="units[${unitIndex}][unitName]" id="unitName_${unitIndex}" placeholder="Enter unit name (e.g., Scientific Learning)" required>
        </div>
        
        <!-- Practicals Section -->
        <div style="margin-bottom: 1.5rem;">
          <h4 style="color: #27ae60; margin-bottom: 0.75rem; font-size: 1.1rem; display: flex; align-items: center;">
            ðŸ§ª <span style="margin-left: 0.5rem;">Practicals</span>
          </h4>
          <div class="practicals-container" id="practicals-${unitIndex}"></div>
          <div class="btn-group" style="justify-content: flex-start; margin-top: 0.5rem;">
            <button type="button" class="btn btn-success" onclick="addPractical(${unitIndex})" style="padding: 0.5rem 1rem; font-size: 0.9rem;">+ Add Practical</button>
          </div>
        </div>
        
        <!-- Project Work Section -->
        <div style="margin-bottom: 1rem;">
          <h4 style="color: #3498db; margin-bottom: 0.75rem; font-size: 1.1rem; display: flex; align-items: center;">
            ðŸ“‹ <span style="margin-left: 0.5rem;">Project Work</span>
          </h4>
          <div class="projects-container" id="projects-${unitIndex}"></div>
          <div class="btn-group" style="justify-content: flex-start; margin-top: 0.5rem;">
            <button type="button" class="btn btn-success" onclick="addProjectWork(${unitIndex})" style="padding: 0.5rem 1rem; font-size: 0.9rem; background: linear-gradient(135deg, #3498db, #2980b9);">+ Add Project Work</button>
          </div>
        </div>
      `;

      unitsContainer.appendChild(unitDiv);
      addPractical(unitIndex); // Add one practical by default
      unitIndex++;
    }

    function addPractical(unitIdx) {
      const practicalsContainer = document.getElementById(`practicals-${unitIdx}`);
      const practicalIndex = practicalsContainer.children.length;

      const practicalDiv = document.createElement('div');
      practicalDiv.className = 'practical-item';

      practicalDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #27ae60; font-weight: 600; min-width: 80px;">Practical ${practicalIndex + 1}:</span>
          <input type="text" name="units[${unitIdx}][practicals][${practicalIndex}]" placeholder="Enter practical name (e.g., To find the density of a solid)" required style="flex: 1;">
          <button type="button" class="btn btn-danger" onclick="removePractical(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      practicalsContainer.appendChild(practicalDiv);
    }

    function addProjectWork(unitIdx) {
      const projectsContainer = document.getElementById(`projects-${unitIdx}`);
      const projectIndex = projectsContainer.children.length;

      const projectDiv = document.createElement('div');
      projectDiv.className = 'project-item';

      projectDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.25rem;">
          <span style="color: #3498db; font-weight: 600; min-width: 90px;">Project ${projectIndex + 1}:</span>
          <input type="text" name="units[${unitIdx}][projectworks][${projectIndex}]" placeholder="Enter project work (e.g., Solar System Model)" required style="flex: 1;">
          <button type="button" class="btn btn-danger" onclick="removeProjectWork(this)" style="padding: 0.3rem 0.6rem; font-size: 0.8rem;">Remove</button>
        </div>
      `;

      projectsContainer.appendChild(projectDiv);
    }

    function removeUnit(button) {
      if (confirm('Are you sure you want to remove this unit and all its practicals?')) {
        button.closest('.unit-section').remove();
        updateUnitNumbers();
      }
    }

    function removePractical(button) {
      if (confirm('Are you sure you want to remove this practical?')) {
        button.closest('.practical-item').remove();
      }
    }

    function removeProjectWork(button) {
      if (confirm('Are you sure you want to remove this project work?')) {
        button.closest('.project-item').remove();
      }
    }

    function updateUnitNumbers() {
      const units = document.querySelectorAll('.unit-section');
      units.forEach((unit, index) => {
        const unitNumber = unit.querySelector('.unit-number');
        if (unitNumber) {
          unitNumber.textContent = `Unit ${index + 1}`;
        }
      });
    }

    // Add first unit by default when page loads
    window.onload = () => {
      addUnit();
    };

    // Form validation
    document.getElementById('sciencePracticalForm').addEventListener('submit', function(e) {
      // Debug: Log form data before submission
      const formData = new FormData(this);
      console.log('Form data being submitted:');
      for (let [key, value] of formData.entries()) {
        console.log(key + ':', value);
      }
      
      // Ensure all units have projectworks fields, even if empty
      const units = document.querySelectorAll('.unit-section');
      units.forEach((unit, unitIndex) => {
        const projectsContainer = unit.querySelector(`#projects-${unitIndex}`);
        if (projectsContainer && projectsContainer.children.length === 0) {
          // Add hidden input for empty projectworks array
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = `units[${unitIndex}][projectworks]`;
          hiddenInput.value = '';
          this.appendChild(hiddenInput);
        }
      });
      
      if (units.length === 0) {
        e.preventDefault();
        alert('Please add at least one unit before submitting.');
        return;
      }

      let hasValidUnit = false;
      units.forEach(unit => {
        const practicals = unit.querySelectorAll('.practical-item');
        const projects = unit.querySelectorAll('.project-item');
        if (practicals.length > 0 || projects.length > 0) {
          hasValidUnit = true;
        }
      });

      if (!hasValidUnit) {
        e.preventDefault();
        alert('Each unit must have at least one practical.');
        return;
      }
    });
  </script>
</body>
</html>
